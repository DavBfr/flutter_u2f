// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// HidApi bindings for Linux and macOS
class Api {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Api(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Api.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int RegisterFIDO2Token(
    int clientDataLength,
    ffi.Pointer<ffi.Uint8> clientData,
    ffi.Pointer<ffi.WChar> appId,
    ffi.Pointer<ffi.WChar> name,
    ffi.Pointer<ffi.WChar> displayName,
    int keyHandlesCount,
    ffi.Pointer<KEY_HANDLE> keyHandles,
    int timeout,
    ffi.Pointer<REGISTER_ATTESTATION> attestation,
  ) {
    return _RegisterFIDO2Token(
      clientDataLength,
      clientData,
      appId,
      name,
      displayName,
      keyHandlesCount,
      keyHandles,
      timeout,
      attestation,
    );
  }

  late final _RegisterFIDO2TokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedLong,
              ffi.Pointer<KEY_HANDLE>,
              ffi.UnsignedLong,
              ffi.Pointer<REGISTER_ATTESTATION>)>>('RegisterFIDO2Token');
  late final _RegisterFIDO2Token = _RegisterFIDO2TokenPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<KEY_HANDLE>,
          int,
          ffi.Pointer<REGISTER_ATTESTATION>)>();

  int ValidateFIDO2Tokens(
    int clientDataLength,
    ffi.Pointer<ffi.Uint8> clientData,
    ffi.Pointer<ffi.WChar> appId,
    int keyHandlesCount,
    ffi.Pointer<KEY_HANDLE> keyHandles,
    int timeout,
    ffi.Pointer<VALIDATE_ATTESTATION> validate,
  ) {
    return _ValidateFIDO2Tokens(
      clientDataLength,
      clientData,
      appId,
      keyHandlesCount,
      keyHandles,
      timeout,
      validate,
    );
  }

  late final _ValidateFIDO2TokensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedLong,
              ffi.Pointer<KEY_HANDLE>,
              ffi.UnsignedLong,
              ffi.Pointer<VALIDATE_ATTESTATION>)>>('ValidateFIDO2Tokens');
  late final _ValidateFIDO2Tokens = _ValidateFIDO2TokensPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<KEY_HANDLE>, int, ffi.Pointer<VALIDATE_ATTESTATION>)>();

  int FreeRegister(
    ffi.Pointer<REGISTER_ATTESTATION> attestation,
  ) {
    return _FreeRegister(
      attestation,
    );
  }

  late final _FreeRegisterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<REGISTER_ATTESTATION>)>>('FreeRegister');
  late final _FreeRegister = _FreeRegisterPtr.asFunction<
      int Function(ffi.Pointer<REGISTER_ATTESTATION>)>();

  int FreeValidate(
    ffi.Pointer<VALIDATE_ATTESTATION> validate,
  ) {
    return _FreeValidate(
      validate,
    );
  }

  late final _FreeValidatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<VALIDATE_ATTESTATION>)>>('FreeValidate');
  late final _FreeValidate = _FreeValidatePtr.asFunction<
      int Function(ffi.Pointer<VALIDATE_ATTESTATION>)>();
}

final class KEY_HANDLE extends ffi.Struct {
  @ffi.UnsignedLong()
  external int size;

  external ffi.Pointer<ffi.Uint8> keyHandle;
}

final class REGISTER_ATTESTATION extends ffi.Struct {
  @ffi.UnsignedLong()
  external int cbAttestationObject;

  external ffi.Pointer<ffi.Uint8> pbAttestationObject;
}

final class VALIDATE_ATTESTATION extends ffi.Struct {
  @ffi.UnsignedLong()
  external int keyHandleLength;

  external ffi.Pointer<ffi.Uint8> keyHandle;

  @ffi.UnsignedLong()
  external int authenticatorDataLength;

  external ffi.Pointer<ffi.Uint8> authenticatorData;

  @ffi.UnsignedLong()
  external int signatureLength;

  external ffi.Pointer<ffi.Uint8> signature;
}
